유사도 검사 풀이
1. Matcher (AssertJ)
2. Mockito Library
3. Test Double 개념
4. Restaurant Booking KATA (Mocking)
- UnitTest 리팩토링 카타
5. TDD (Mocking) KATA


리팩토링 단계에서 작은 범주의 일반화는 허용
켄트백(중복, 중복 -> 일반화 : 입/출력이 달라짐 ==> 작은 범주의 일반화는 허용) vs 마틴파울러

설계 미흡 초보 개발자용
 중복 발생될 테스트 케이스를 준비
 -> 하드 코딩으로 만들어진 중복 코드 발생
 -> 일반화된 아이디어를 발견해냄
 -> 일반화 리팩토링

TDD 훈련용 (켄트백 baby Step)
 일반화된 코드 구상
 -> 설계 검증을 위한 Normal case / Edge Case Test 확보 (Red 단계)
 -> 중복코드 하드코딩 (Green 단계)
 -> 일반화된 코드로 리팩토링 (Refactor 단계)

TDD 실무용 
 일반화된 코드 구상
 -> 설계 검증을 위한 Normal case / Edge Case Test 확보 (Red 단계)
 -> 일반화된 코드로 개발 (Green 단계)
 -> 가독성 좋은 코드로 리팩토링 (Refactor 단계)

SUT 
테스트 하려는데
 - 느리거나
 - 의존 복잡도
 - 외부 의존
 - 등등 
-> 대역 쓰는 것을 

원본 테스트 힘들 때 (선호도 원본 > Fake > Mock)
1. Fake (ex. 시뮬레이터, 운영 DB를 대체하는 DB) -> 우선 순위가 높으나 만들기 어렵다.
2. Mock Object

Test Double 이론 정립 안되었어요.
동네마다 달라요.
마틴파울러 - 블로그 정리 (이거 위주로 수업)

5가지 
- 더미 (Dummy)
- 스텁(Stub) (ex. 심심할때 심심이)
  스텁을 건다 : 3, 3 -> 9999 리턴해 ~ 세팅
- 스파이(Spy)
  실제 객체와 완전 동일하게 동작. 스텁 기능도 있다. Behavior(해동) 검증도 가능하다
  잘 사용 안함 (???????
- 목 (Mock)
  가장 많이 사용. 기본

Stubbing
 ▪ A 값을 Parameter로 넣으면, B 값이 return 되도록 세팅
Behavior Verification
 ▪ Test 종료 후, 특정 메서드가 동작 되었는지 검증 가능
 ▪ 호출횟수/ 순서대로 호출 여부 등 확인 가능

Unit Test 를 시작해야 TDD를 할 수 있어요.
UT 만들기 어려운 모듈
- SUT 하위 모듈이 느리거나, API, 복잡하거나 할 때
  Mock

Mock 단점
리팩토링 할 때 UnitTest 를 계속 관리해 줘야 한다.


    // https://mvnrepository.com/artifact/org.assertj/assertj-core
    testImplementation("org.assertj:assertj-core:3.27.3")
    // https://mvnrepository.com/artifact/org.mockito/mockito-junit-jupiter
    testImplementation("org.mockito:mockito-junit-jupiter:5.18.0")
