TDD 4일차 (Last)
- 좋은 UnitTest / 나쁜 UnitTest
- Trading System KATA

전체적으로
Mocking
본격적인 코드리뷰 활동

===================================
이후 
팀실습
5일간

이 강의장
코치님

1일차 개발
3일차 추가미션
5일차 팀별 발표
===================================

좋은 UT 남겨두고
나쁜 UT 삭제하자~~

기준
1. 회귀방지 역할을 해야 한다.
2. 리팩토링 내성을 가져야 한다.
3. 적시에 테스트 코드 작성
   정확한 테스트 포인트
4. 최소한의 유지비로, 최대한의 가치
   너무 많지 않은
5. 이해하기 쉬운 테스트 코드 
   의도가 분명히 들어나는
6. 실패시 에러메시지, 테케 이름
7. 빨라야
8. AAA(Arange Act Assert) 패턴
9. Mock은 리팩토링 내성에 좋다. (안 쓸 수 있으면 더 좋다.)
   - 주입하는 방법 (더 좋음)
   - 목을 쓰는 방법 
     Stub, 행동검증 (함수 몇번호출되었는가?) -> 리팩토링하면 함수명 변경 등 테케 깨짐
     상태검증이어 함.
   목킹보다 Fake가 더 좋음


< 이론 정리 >

클린코드
- 가독성 / 유지보수성 좋은 구조(OOP) / 안전성
- 독자 위주로 코드를 세심하게, 디테일
- 객체지향스러운 코드 모듈화
- 안정성 - 예측성, Side Effect, 계약의 의한 프로그래밍

리팩토링
- KATA
  Converage UI 디테일 살리기
  모듈화, SOLID, 디자인패턴

TDD
- Git 정리 PR 코드리뷰어 마음가짐
- TDD 개요, TDD KATA
- Mocking Test Double Device Driver
- 총 복습 - 좋은 UT, 팀 협업 하나의 Application
