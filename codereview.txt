민코딩 최인호 강사

오리엔테이션 자료 : url.kr/rz2h9i
http://discord.gg/eAJhgjHq

실습환경
Intellij (community 버전)
jdk 17
gradle

< 교육 일정 및 계획 >
클린코드 수업
Day1
 - 클린코드 정의
   가독성, 유지보수성, 안전성
 - 가독성 : Naming, 메서드 추상화
 - 안전성 : 계약에 의한 프로그래밍 개념
            (문법은 각 조직마다 java 버전 등 상이하여 ...)
Day2
 - 유지보수성 : 객체지향 패러다임 정리
   유지보수성이 좋은게 뭐냐? 객체지향패러다임 수용
   객체지향 스러운 것 고찰
   예측성
   실습자료 KATA

리팩토링 (4일 동안) : 훈련
 4일 KATA
 마틴파울러 KATA
 리팩토링 KATA Best 선정

TDD
 1Day Git 정리 (팀 활동)
 2Day TDD 개요
 3Day Mockito 
 4Day 

[Clean Code]
"SW 공학" 목표
품질을 유지하면서 SW 비용 감소

클린코드
- 버그가 줄어요 (사람의 실수가 감소) -> SW 비용 감소
- 기능 추가 빨라요 -> SW 비용 감소

기업에서는 클린코드를 만드는 문화
임직원 강제
1. 사내 Github 문화
2. PR 코드리뷰시 Approve 있어야 한다.
3. 승인기준 : 클린코드 여부
긍정적인 코드리뷰 문화

Agile 문화

업무를 하는 방법
1. 개발
2. 테스트 (PASS)
3. 릴리즈
CRA 과정 이후로
1. 개발한다.
2. 클린코드로 리팩토링한다
3. 테스트해본다 (PASS)
4. 코드리뷰어 승인을 받는다.
5. 릴리즈 한다.

저자마인드
보이스카우트룰

0522-2
패러다임
- 사고방식
- 철학 큰 범주 X
절차지향 패러다임
 - 08:00, 9:00, 10:00, 15:00 소설 끝
객체지향 패러다임
- 등장인물 설정
  어떤 인물
- 등장인물 속성, 행동
  등장인물 어떤 행동 할수 있고, 어떤 데이터
- 등장인물간 관계 어떻게 되는지 설계
- 절차지향 처럼 고민 개발
함수형 프로그래밍 패러다음
 몇가지 규칙을 잘 지켜서 만드는 방법
 조건1) 선언형 프로그래밍 지향 : 문법을 직관적으로 HOW 없이 WHAT 이해할 수 있는 문법을 사용 지향
 조건 들..) 일급객체, 순수함수 권장
 ...

클린코드 정의
 1. 가동성 지향
 2. 유지보수성이 좋은 코드 지향 (객체지향 패러다임 전부 수용)
 3. 안정성이 좋은 코드 (계약의 의한 프로그래밍)

용어
컴퓨터공학 "추상화"
불필요한 정보를 숨기는 것

객체지향패러다임 "추상화"

Layer 맞지 않는 소스코드 디테일 추상화
내가 개발하고 있는 Layer Application Layer


Unit Test -> Regression 

리팩토링
 - 메서드 수준 먼저 리팩토링
 - 다음으로 Class 

개발팀
 - Unit Test (Regression 테스트를 하기 위해서 진행)
   OOP 이론 "Class"
   Class 단위로 테스트 하는 것
   메서드 단위로 테스트 하는 것
   > 협업을 위해서 공통된 방법 Unit Test Framework 을 사용해야 함
     Unit Test 왕은 xUnit -> JUnit 사용
     더 이쁜 문법을 쓰고 싶은데? JUnit 플러그인 사용 
     JUnit + assertJ + Mockito
   Fast Fail
     불량 분석, 빠르게 분석 되어야 한다
   샘플코드 

 - 통합테스트

검증팀, 상품, 사업 팀(E2E Test)
 - Black box Test
 - 수동 테스트
 - 검증팀 중에서 고객 출하하기 전 테스트
 - 고객에서 하는 테스트들

"계약에 의한 프로그래밍"
클린코드에서 지향점
 - 가독성
 - 유지보수성
 - 안정성 
   1) 안전한 문법 사용 
     > 함수형 프로그래밍
     > 공식 Library 사용
   2) 계약에 의한 프로그래밍 (UT 보다 더 실효성 있는 안전성 확보 방법)
     > Pre condition ( validcheck code, precondition code )
     > Post Condition
     > 불편성 검증

   // 1. 부정의 개수는 적을 수록 좋아요. 부정끼리 괄호 ( b1 && !(b2 || b3) )
   // 2. 변수명에 부정 키워드 적지 말아주세요
   

SW 버그 <-- 품질하락, SW 비용 증가
