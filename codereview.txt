민코딩 최인호 강사

오리엔테이션 자료 : url.kr/rz2h9i
http://discord.gg/eAJhgjHq

실습환경
Intellij (community 버전)
jdk 17
gradle

< 교육 일정 및 계획 >
클린코드 수업
Day1
 - 클린코드 정의
   가독성, 유지보수성, 안전성
 - 가독성 : Naming, 메서드 추상화
 - 안전성 : 계약에 의한 프로그래밍 개념
            (문법은 각 조직마다 java 버전 등 상이하여 ...)
Day2
 - 유지보수성 : 객체지향 패러다임 정리
   유지보수성이 좋은게 뭐냐? 객체지향패러다임 수용
   객체지향 스러운 것 고찰
   예측성
   실습자료 KATA

리팩토링 (4일 동안) : 훈련
 4일 KATA
 마틴파울러 KATA
 리팩토링 KATA Best 선정

TDD
 1Day Git 정리 (팀 활동)
 2Day TDD 개요
 3Day Mockito 
 4Day 

[Clean Code]
"SW 공학" 목표
품질을 유지하면서 SW 비용 감소

클린코드
- 버그가 줄어요 (사람의 실수가 감소) -> SW 비용 감소
- 기능 추가 빨라요 -> SW 비용 감소

기업에서는 클린코드를 만드는 문화
임직원 강제
1. 사내 Github 문화
2. PR 코드리뷰시 Approve 있어야 한다.
3. 승인기준 : 클린코드 여부
긍정적인 코드리뷰 문화

Agile 문화

업무를 하는 방법
1. 개발
2. 테스트 (PASS)
3. 릴리즈
CRA 과정 이후로
1. 개발한다.
2. 클린코드로 리팩토링한다
3. 테스트해본다 (PASS)
4. 코드리뷰어 승인을 받는다.
5. 릴리즈 한다.

저자마인드
보이스카우트룰

0522-2
패러다임
- 사고방식
- 철학 큰 범주 X
절차지향 패러다임
 - 08:00, 9:00, 10:00, 15:00 소설 끝
객체지향 패러다임
- 등장인물 설정
  어떤 인물
- 등장인물 속성, 행동
  등장인물 어떤 행동 할수 있고, 어떤 데이터
- 등장인물간 관계 어떻게 되는지 설계
- 절차지향 처럼 고민 개발
함수형 프로그래밍 패러다음
 몇가지 규칙을 잘 지켜서 만드는 방법
 조건1) 선언형 프로그래밍 지향 : 문법을 직관적으로 HOW 없이 WHAT 이해할 수 있는 문법을 사용 지향
 조건 들..) 일급객체, 순수함수 권장
 ...

클린코드 정의
 1. 가동성 지향
 2. 유지보수성이 좋은 코드 지향 (객체지향 패러다임 전부 수용)
 3. 안정성이 좋은 코드 (계약의 의한 프로그래밍)

용어
컴퓨터공학 "추상화"
불필요한 정보를 숨기는 것

객체지향패러다임 "추상화"

Layer 맞지 않는 소스코드 디테일 추상화
내가 개발하고 있는 Layer Application Layer


Unit Test -> Regression 

리팩토링
 - 메서드 수준 먼저 리팩토링
 - 다음으로 Class 

개발팀
 - Unit Test (Regression 테스트를 하기 위해서 진행)
   OOP 이론 "Class"
   Class 단위로 테스트 하는 것
   메서드 단위로 테스트 하는 것
   > 협업을 위해서 공통된 방법 Unit Test Framework 을 사용해야 함
     Unit Test 왕은 xUnit -> JUnit 사용
     더 이쁜 문법을 쓰고 싶은데? JUnit 플러그인 사용 
     JUnit + assertJ + Mockito
   Fast Fail
     불량 분석, 빠르게 분석 되어야 한다
   샘플코드 

 - 통합테스트

검증팀, 상품, 사업 팀(E2E Test)
 - Black box Test
 - 수동 테스트
 - 검증팀 중에서 고객 출하하기 전 테스트
 - 고객에서 하는 테스트들

"계약에 의한 프로그래밍"
클린코드에서 지향점
 - 가독성
 - 유지보수성
 - 안정성 
   1) 안전한 문법 사용 
     > 함수형 프로그래밍
     > 공식 Library 사용
   2) 계약에 의한 프로그래밍 (UT 보다 더 실효성 있는 안전성 확보 방법)
     > Pre condition ( validcheck code, precondition code )
     > Post Condition
     > 불편성 검증

   // 1. 부정의 개수는 적을 수록 좋아요. 부정끼리 괄호 ( b1 && !(b2 || b3) )
   // 2. 변수명에 부정 키워드 적지 말아주세요
   

SW 버그 <-- 품질하락, SW 비용 증가


[25/06/22][GIT]

Git <-- Desktop App
Gihub <-- Web App
- MS 인수
- Github enterprise 기업전용 < 사내시스템, 예전버전

Github 가입후 로그인


repository = 문서

repo.
repo. 리포 / 레포

repo 저장한다, 넣는다
 = commit

Remote repository
Local repository

upload : push
download : pull

change - 유지보수

github web app...
- 개발자들이 협업하는데 도와주는 툴들의 모음
- IDE
remote repo 제공해주는 서비스이다. (X)

https://gist.github.com/dudalss-moon/d89cda354af6e103aa2b585a9ed3cf6a

JIRA
confluence 기능 도 제공

젠킨스 대용
Actions
-> 자동배포 자동테스트

팀실습할 때 git push 안될 때
시작 > 자격증명 

git 목적-버전관리
1. 버전관리
   공유폴더사용대신, 소스코드들을버전별로관리
2. 동료와함께하나의프로젝트를개발
   git의 Branch ~ Merge 기능 사용
3. 자동백업된코드복원
   과거소스코드로되돌아가기

github 목적- 협업
1. git처럼 버전관리 가능
2. 서버에소스코드저장
   로컬컴퓨터가아닌, 원격서버에소스코드를안전하게저장
3. 원격협업
   Issue(ticket) Open : 여러 사람에게 작업요청 / 질문 / 버그리포트 / 기능 추가 가능
   코드리뷰: 업로드한소스코드에대해토론


"GUI Shell"
 - "Windows shell"
"CLI Shell"
  명령 프롬프트
  PowerShell

Linux


글자기반 GLI
 - git bash

 GUI 프로그램으로 왕
- 아틀라시안 제품 SourceTree (전부 기능 사용 가능)
- Github Desktop (일부 기능 사용)

Untracked files <--- 관리안하고 있는 파일 (신규파일)

git status
git Int
git status
git add .
git status
git commit -m "hi"
git status
git log


개념
git add
내부 원리
Staging Area 에 


GUI - 보기좋아요, 까먹지 않아요
단점 : 느려요.

CLI : 100ms 충분 즉각
장점 : 20년전에 학습
지금도 계속, 앞으로도 계속
단점 :
 git diff <--- GUI 
 git graph 복잡 <--- 

 파일 기반
 CLI, GUI 동시 켜 놔도 동기화 잘 됨.


<git과 Gihub 연동>
1. Local Repo에서 생성하고 git 에 반영
2. remote와 연동
 User@DESKTOP-5FBE16T MINGW64 /c/work/step5
$ git init
Initialized empty Git repository in C:/work/step5/.git/

User@DESKTOP-5FBE16T MINGW64 /c/work/step5 (master)
$ git add .

User@DESKTOP-5FBE16T MINGW64 /c/work/step5 (master)
$ git commit -m "first"
[master (root-commit) c4c526c] first
 1 file changed, 2 insertions(+)
 create mode 100644 README.md

User@DESKTOP-5FBE16T MINGW64 /c/work/step5 (master)
$

User@DESKTOP-5FBE16T MINGW64 /c/work/step5 (master)
$ git remote add origin https://github.com/dudalss-moon/remote-4323.git

User@DESKTOP-5FBE16T MINGW64 /c/work/step5 (master)
$

User@DESKTOP-5FBE16T MINGW64 /c/work/step5 (master)
$ git push -u origin master
info: please complete authentication in your browser...
Enumerating objects: 3, done.
Counting objects: 100% (3/3), done.
Writing objects: 100% (3/3), 220 bytes | 220.00 KiB/s, done.
Total 3 (delta 0), reused 0 (delta 0), pack-reused 0 (from 0)
To https://github.com/dudalss-moon/remote-4323.git
 * [new branch]      master -> master
branch 'master' set up to track 'origin/master'.

User@DESKTOP-5FBE16T MINGW64 /c/work/step5 (master)
$


무료 이미지 
https://pixabay.com/


Pull Request 

Comment
Submit general feedback without explicit approval.

Approve
Pull request authors can’t approve their own pull request.

Request changes
Pull request authors can’t request changes on their own pull request.


1) Git clone
2) Git (CLI) branch 생성
3) 생성한 branch로 checkout
4) txt 생성
5) commit & push



Working Directory
Staging Area
Local Repo.
Remote Repo.
Stage
git add 
git commit -m
git log
git status
untracked files
changes
git config
git init
push
pull



SW공학
- 품질은 유지하면서 SW비용 낮추는 것 목표
- 사업가 중심 만들어진 이론

Agile 왜할까?
- 

SW 회사를 운영
대표기획
- 개발 시작
- 디자이너 대표기획

개발
- 디자인
- 개발 대기

검증인원 대기
 검증

 대표자 대기 끝나고
 만들어진 것을 최종 평가

 
 Agile
  - 문서 최소 미팅은 짧고
  - 동작되는 SW

방법론
 - Scrum 왕
 - XP (극단적인 프로그래밍)

모든 임직원분들의 하고 있는 업무가 다 공개
 
Daily 어디까지
어제 똑같으면
왜 똑같지? 인원을 더 붙여줄게


RED -> GREEN => BLUE
ToDo List
       Check
                Refactoring

TDD -> 품질
품질 더 좋아져요
팀원 15명
개발실력

TDD 
Output 더 안전한 
유지보수

핵심로직 TDD 협의

TDD
일이 더 많다
필요한 일이다.
비용이 된다면 꼭 필요하다

UnitTest 만들기 어려운 모듈
- 포기
- 모듈 대역

TDD 1일차 : GIT 개요
TDD 2일차 : TDD KATA 연습
TDD 3일차 : Mocking (Mokito) + TDD
TDD 4일차 : TDD 배웠던 것ㄷㄹ + 팀실습

TDD 개요
 - 테스트 먼저 만든다
 - Baby Step
 - Red : TDOD
 - Green : 면죄부
 - Refactor : Green
